name: Build TensorFlowLite and Create .deb Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TENSORFLOW_BRANCH: "v2.18.0"  # Specify the TensorFlow branch or tag manually
  TENSORFLOW_VERSION: "2.18.0"  # Manually define the TensorFlow version

jobs:
  build-and-package:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [amd64, aarch64]

    steps:
    # 1. Checkout the Workflow Repository
    - name: Checkout Repository
      uses: actions/checkout@v3

    # 2. Clone TensorFlow Source Code
    - name: Clone TensorFlow Repository
      run: |
        git clone --depth 1 --branch ${{ env.TENSORFLOW_BRANCH }} https://github.com/tensorflow/tensorflow.git

    # 3. Install Bazel
    - name: Install Bazel
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        curl -LO https://github.com/bazelbuild/bazel/releases/download/6.5.0/bazel-6.5.0-linux-x86_64
        chmod +x bazel-6.5.0-linux-x86_64
        sudo mv bazel-6.5.0-linux-x86_64 /usr/local/bin/bazel
        bazel --version

    # 4. Install Build Dependencies
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip build-essential dpkg-dev
        pip3 install numpy

    # 5. Set up Environment for aarch64 (if needed)
    - name: Set Up Cross Compilation (aarch64)
      if: matrix.arch == 'aarch64'
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        export CC=aarch64-linux-gnu-gcc
        export CXX=aarch64-linux-gnu-g++
        export BAZEL_LINKOPTS='-static-libstdc++'

    - name: Build TensorFlowLite
      run: |
        cd tensorflow
        bazel build --define xnn_enable_avxvnniint8=false --jobs=$(nproc) --config=monolithic --verbose_failures --symlink_prefix=/ //tensorflow/lite:libtensorflowlite.so

    - name: Locate Built TensorFlow Lite Library
      run: find . -name "libtensorflowlite.so" || echo "File not found!"

    - name: Prepare Libraries and Headers
      run: |
        mkdir -p package/usr/lib package/usr/include/tensorflow package/usr/include/flatbuffers
        cp bazel-out/k8-opt/bin/tensorflow/lite/libtensorflowlite.so package/usr/lib/
        rsync -av tensorflow/ package/usr/include/tensorflow/
        rsync -av bazel-out/external/flatbuffers/include/flatbuffers/ package/usr/include/flatbuffers/

    - name: Debug TensorFlow Headers
      run: find tensorflow/ -name "*.h" | head -n 10

    - name: Debug FlatBuffers Headers
      run: find bazel-out/ -name "flatbuffers" || echo "FlatBuffers headers not found!"


    # 8. Package into a .deb File
    - name: Create .deb Package
      run: |
        mkdir -p package/DEBIAN
        cat <<EOT > package/DEBIAN/control
        Package: tensorflowlite
        Version: ${{ env.TENSORFLOW_VERSION }}
        Section: libs
        Priority: optional
        Architecture: ${MATRIX_ARCH}
        Maintainer: Your Name <your_email@example.com>
        Description: TensorFlow Lite library and headers
        EOT
        dpkg-deb --build package tensorflowlite-${{ matrix.arch }}.deb

    # 9. Upload the .deb Artifact
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: tensorflowlite-${{ matrix.arch }}-deb
        path: tensorflowlite-${{ matrix.arch }}.deb
