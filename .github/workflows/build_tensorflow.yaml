name: Build TensorFlowLite and Create .deb Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TENSORFLOW_BRANCH: "v2.18.0"  # Specify the TensorFlow branch or tag manually
  TENSORFLOW_VERSION: "2.18.0"  # Manually define the TensorFlow version

jobs:
  build-and-package:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [amd64, aarch64]

    steps:
    # 1. Checkout the Workflow Repository
    - name: Checkout Repository
      uses: actions/checkout@v3

    # 2. Clone TensorFlow Source Code
    - name: Clone TensorFlow Repository
      run: |
        git clone --depth 1 --branch ${{ env.TENSORFLOW_BRANCH }} https://github.com/tensorflow/tensorflow.git

    # 3. Install Bazel
    - name: Install Bazel
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        curl -LO https://github.com/bazelbuild/bazel/releases/download/6.5.0/bazel-6.5.0-linux-x86_64
        chmod +x bazel-6.5.0-linux-x86_64
        sudo mv bazel-6.5.0-linux-x86_64 /usr/local/bin/bazel
        bazel --version

    # 4. Install Build Dependencies
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip build-essential dpkg-dev
        pip3 install numpy

    # 5. Set up Environment for aarch64 (if needed)
    - name: Set Up Cross Compilation (aarch64)
      if: matrix.arch == 'aarch64'
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        export CC=aarch64-linux-gnu-gcc
        export CXX=aarch64-linux-gnu-g++
        export BAZEL_LINKOPTS='-static-libstdc++'

    - name: Build TensorFlowLite
      run: |
        cd tensorflow
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          bazel build --define xnn_enable_avxvnniint8=false --jobs=$(nproc) --config=monolithic --cpu=aarch64 --verbose_failures --symlink_prefix=/ //tensorflow/lite:libtensorflowlite.so
        else
          bazel build --define xnn_enable_avxvnniint8=false --jobs=$(nproc) --config=monolithic --verbose_failures --symlink_prefix=/ //tensorflow/lite:libtensorflowlite.so
        fi
        
    - name: Locate and Copy TensorFlow Lite Library
      run: |
        LIB_PATH=$(find /home/runner/.cache/bazel/_bazel_runner/ -path "*/bazel-out/k8-opt/bin/tensorflow/lite/libtensorflowlite.so" | head -n 1)
        if [ -z "$LIB_PATH" ]; then
          echo "Error: libtensorflowlite.so not found!"
          exit 1
        fi
        echo "Found libtensorflowlite.so at: $LIB_PATH"
        mkdir -p package/usr/lib
        cp "$LIB_PATH" package/usr/lib/

    - name: Locate and Copy TensorFlow Headers
      run: |
        mkdir -p package/usr/include/tensorflow
        rsync -av --include '*/' --include '*.h' --exclude '*' tensorflow/ package/usr/include/tensorflow/

    - name: Locate and Copy FlatBuffers Headers
      run: |
        FLATBUFFERS_PATH=$(find /home/runner/.cache/bazel/ -path "*/external/flatbuffers/include/flatbuffers" | head -n 1)
        if [ -z "$FLATBUFFERS_PATH" ]; then
          echo "Error: FlatBuffers headers not found!"
          exit 1
        fi
        echo "Found FlatBuffers headers at: $FLATBUFFERS_PATH"
        mkdir -p package/usr/include/flatbuffers
        rsync -av --include '*/' --include '*.h' --exclude '*' "$FLATBUFFERS_PATH/" package/usr/include/flatbuffers/

    # 8. Package into a .deb File
    - name: Create .deb Package
      run: |
        mkdir -p package/DEBIAN
        cat <<EOT > package/DEBIAN/control
        Package: tensorflowlite
        Version: ${{ env.TENSORFLOW_VERSION }}
        Section: libs
        Priority: optional
        Architecture:${{ matrix.arch }}
        Maintainer: Shadab Shaikh me@shadab-shaikh.de
        Description: TensorFlow Lite library and headers
        EOT
        dpkg-deb --build package tensorflowlite-${{ matrix.arch }}.deb

    - name: Create Git Tag
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag ${{ env.TENSORFLOW_VERSION }}
        git push origin ${{ env.TENSORFLOW_VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        files: tensorflowlite-${{ matrix.arch }}.deb
        tag_name: ${{ env.TENSORFLOW_VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
